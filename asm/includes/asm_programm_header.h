/*
** EPITECH PROJECT, 2023
** B-CPE-200-RUN-2-1-corewar-pierre-alexandre.grosset
** File description:
** asm_programm_header
*/

////////////////////////////////////////////////////////////////////////////////
/// \file asm_programm_header.h
/// \brief Contains all the includes, defines, structures for the asm program.
/// \authors PAGY0Z, Amdjadouxx, AxsOne, DarkCat974
/// \version 0.1
/// \date 2023-13-05
////////////////////////////////////////////////////////////////////////////////

#ifndef ASM_PROGRAMM_HEADER_H_
    #define ASM_PROGRAMM_HEADER_H_

    #include "include_header.h"

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM
    /// \brief All the modules from the ASM part of the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_MACROS_DEFINES
    /// \brief All the MACROS and DEFINES from the ASM part of the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The extension of the asm files.
    /// \def EXT_ASM
    /// \note The extension is ".s".
    ////////////////////////////////////////////////////////////////////////////
    #define EXT_ASM ".s"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The extension of the cor files.
    /// \def EXT_COR
    /// \note The extension is ".cor".
    ////////////////////////////////////////////////////////////////////////////
    #define EXT_COR ".cor"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The char that terminates an instruction.
    /// \def LABEL_CHAR
    /// \note The char is ':'.
    ////////////////////////////////////////////////////////////////////////////
    #define LABEL_CHAR ':'

    ////////////////////////////////////////////////////////////////////////////
    /// \brief 2 bits mask for parameters.
    /// \def T_REG
    /// \note Indicates that the parameter is a register.
    ////////////////////////////////////////////////////////////////////////////
    #define T_REG 0b01

    ////////////////////////////////////////////////////////////////////////////
    /// \brief 2 bits mask for parameters.
    /// \def T_DIR
    /// \note Indicates that the parameter is a direct value.
    ////////////////////////////////////////////////////////////////////////////
    #define T_DIR 0b10

    ////////////////////////////////////////////////////////////////////////////
    /// \brief 2 bits mask for parameters.
    /// \def T_IND
    /// \note Indicates that the parameter is an indirect value.
    ////////////////////////////////////////////////////////////////////////////
    #define T_IND 0b11

    ////////////////////////////////////////////////////////////////////////////
    /// \brief 2 bits mask for parameters.
    /// \def T_LAB
    /// \note Indicates that the parameter is not a register, a direct or
    /// indirect value
    ////////////////////////////////////////////////////////////////////////////
    #define T_OTH 0b00

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The Magic number of the cor files.
    /// \def MAGIC_NUMBER
    /// \note The magic number is: 0xea83f3.
    ////////////////////////////////////////////////////////////////////////////
    #define MAGIC_NUMBER ((byte_t[]){0x00, 0xea, 0x83, 0xf3})

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The size of the magic number.
    /// \def MAGIC_NUMBER_SIZE
    /// \note The size is 4 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define MAGIC_NUMBER_SIZE 4

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The size of the name of the program.
    /// \def PROG_NAME_LENGTH
    /// \note The size is 128 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define PROG_NAME_LENGTH 128

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The size of the program.
    /// \def PROG_SIZE
    /// \note The size is 4 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define PROG_SIZE 4

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The size of the comment of the program.
    /// \def COMMENT_LENGTH
    /// \note The size is 2048 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define COMMENT_LENGTH 2048

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The MAGIC NUMBER + NAME
    /// \def LEN_MAGIC_NAME
    /// \note The size is 132 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define LEN_MAGIC_NAME (MAGIC_NUMBER_SIZE + PROG_NAME_LENGTH)

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The MAGIC NUMBER + NAME + PADDING
    /// \def LEN_MAGIC_NAME_PADDING
    /// \note The size is 136 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define LEN_MAGIC_NAME_PADDING (LEN_MAGIC_NAME + 4)

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The MAGIC NUMBER + NAME + PADDING + SIZE
    /// \def LEN_MAGIC_NAME_PADDING_SIZE
    /// \note The size is 140 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define LEN_MAGIC_NAME_PADDING_SIZE (LEN_MAGIC_NAME_PADDING + PROG_SIZE)

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The MAGIC NUMBER + NAME + PADDING + SIZE + COMMENT + PADDING
    /// \def FULL_HEADER_SIZE
    /// \note The size is 2192 bytes.
    ////////////////////////////////////////////////////////////////////////////
    #define FULL_HEADER_SIZE (LEN_MAGIC_NAME_PADDING_SIZE + COMMENT_LENGTH + 4)

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Put the parameters in the right order.
    /// \def PARAM
    /// \param a The 1st 2bits.
    /// \param b The 2nd 2bits.
    /// \param c The 3rd 2bits.
    /// \param d The 4th 2bits.
    /// \note The parameters are in the order: 1st, 2nd, 3rd, 4th.
    /// \note The parameters are 2 bits long.
    ////////////////////////////////////////////////////////////////////////////
    #define PARAM(a, b, c, d) ((d << 0) | (c << 2) | (b << 4) | (a << 6))

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Check if a char is a valid label char.
    /// \param c The char to check.
    /// \return true if the char is valid, false otherwise.
    /// \note Valid chars are: '_', lowercase letters and numbers.
    ////////////////////////////////////////////////////////////////////////////
    #define IS_LABEL_VALID_CHAR(c) ((c == '_' || IS_LOWER(c) || IS_NUM(c)))

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_TYPEDEFS
    /// \brief All the TYPEDEFS from the ASM part of the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \enum
    /// \brief Register enum.
    ////////////////////////////////////////////////////////////////////////////
    typedef enum register_e {
        REG_NONE = 0x00,
        R01 = 0x01,
        R02 = 0x02,
        R03 = 0x03,
        R04 = 0x04,
        R05 = 0x05,
        R06 = 0x06,
        R07 = 0x07,
        R08 = 0x08,
        R09 = 0x09,
        R10 = 0x0a,
        R11 = 0x0b,
        R12 = 0x0c,
        R13 = 0x0d,
        R14 = 0x0e,
        R15 = 0x0f,
        R16 = 0x10,
        REG_NUMBER = R16,
    } register_asm_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \enum
    /// \brief Parsing byte enum
    ////////////////////////////////////////////////////////////////////////////
    typedef enum parsing_byte_pos_e {
        P_BYTE_NONE = 0,
        FIRST = 6,
        SECOND = 4,
        THIRD = 2,
        MAX_POS = 3,
    } pbyte_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The operation structure. It contains the name of the operation
    /// and its code.
    /// \struct operation_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct register_array_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The number of the register.
        ////////////////////////////////////////////////////////////////////////
        register_asm_t id;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The name of the register.
        ////////////////////////////////////////////////////////////////////////
        char *name;
    } register_array_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The label structure.
    /// \struct labels_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct labels_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The name of the label.
        ////////////////////////////////////////////////////////////////////////
        char *name;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The address of the label.
        ////////////////////////////////////////////////////////////////////////
        int address;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The positions of the calls of the label.
        ////////////////////////////////////////////////////////////////////////
        int *callpos;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The sizes of the calls of the label.
        ////////////////////////////////////////////////////////////////////////
        int *callsize;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The positions of the command that calls the label.
        ////////////////////////////////////////////////////////////////////////
        int *cmdpos;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The number of calls of the label.
        ////////////////////////////////////////////////////////////////////////
        int nbcalls;
    } labels_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The asm structure.
    /// \struct asm_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct asm_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The new name of the file.
        ////////////////////////////////////////////////////////////////////////
        char *file_name;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The file content divided by lines
        ////////////////////////////////////////////////////////////////////////
        char **file_lines;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The Labels Array.
        ////////////////////////////////////////////////////////////////////////
        labels_t **labels;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The buffer in we add the cor file content.
        ////////////////////////////////////////////////////////////////////////
        byte_t *buffer;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The index of the buffer.
        ////////////////////////////////////////////////////////////////////////
        int index;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The current line index
        ////////////////////////////////////////////////////////////////////////
        int line_index;
    } asm_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The instruction structure.
    /// \struct instruction_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct instruction_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The name of the instruction.
        ////////////////////////////////////////////////////////////////////////
        char *name;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The associated function.
        ////////////////////////////////////////////////////////////////////////
        bool (*function)(asm_t *asm_s, char **args);
    } instruction_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The call_data structure.
    /// \struct call_data_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct call_data_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The position of the command.
        ////////////////////////////////////////////////////////////////////////
        int cmdpos;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The position at which we write.
        ////////////////////////////////////////////////////////////////////////
        int callpos;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The number of bytes to write.
        ////////////////////////////////////////////////////////////////////////
        int size;
    } call_t;

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_FUNCTIONS
    /// \brief All the FUNCTIONS from the ASM part of the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_INIT_ASM_FUNCTIONS
    /// \brief All the INIT_ASM_FUNCTIONS from the ASM part of the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    void *e_init_buffer(asm_t *asm_struct);
    void *e_init_file_name(asm_t *asm_struct);
    void *e_init_file_lines(asm_t *asm_struct);
    void *e_init_init_labels(asm_t *asm_struct);
    int e_init_asm_programm(asm_t *asm_struct);

    asm_t *init_asm_struct(char const *filepath);
    int init_asm_programm(char const *filepath);

    char **check_add_label(char **array, char *line);
    char **get_labels_names(char **file_lines);
    labels_t **convert_labels(char **labels_name);
    labels_t **init_labels(char **file_lines);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_OPERATIONS_PARSING_FUNCTIONS
    /// \brief All the OPERATIONS_PARSING_FUNCTIONS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    bool parsing_01_live(asm_t *asm_struct, char **line);
    bool parsing_02_ld(asm_t *asm_struct, char **line);
    bool parsing_03_st(asm_t *asm_struct, char **line);
    bool parsing_04_add(asm_t *asm_struct, char **line);
    bool parsing_05_sub(asm_t *asm_struct, char **line);
    bool parsing_06_and(asm_t *asm_struct, char **line);
    bool parsing_07_or(asm_t *asm_struct, char **line);
    bool parsing_08_xor(asm_t *asm_struct, char **line);
    bool parsing_09_zjmp(asm_t *asm_struct, char **line);
    bool parsing_10_ldi(asm_t *asm_struct, char **line);
    bool parsing_11_sti(asm_t *asm_struct, char **line);
    bool parsing_12_fork(asm_t *asm_struct, char **line);
    bool parsing_13_lld(asm_t *asm_struct, char **line);
    bool parsing_14_lldi(asm_t *asm_struct, char **line);
    bool parsing_15_lfork(asm_t *asm_struct, char **line);
    bool parsing_16_aff(asm_t *asm_struct, char **line);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_PARSING_FUNCTIONS
    /// \brief All the PARSING_FUNCTIONS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_COMB_INSTRUCTIONS_FUNCTIONS
    /// \brief All the COMB_INSTRUCTIONS_FUNCTIONS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    bool add_dir_ind(asm_t *asms, char *arg, int cmdpos, pbyte_t pbt);
    bool add_dirindex_ind(asm_t *asms, char *arg, int cmdpos, pbyte_t pbt);
    bool add_reg_dir_ind(asm_t *asms, char *arg, int cmdpos, pbyte_t pbt);
    bool add_reg_dir(asm_t *asms, char *arg, int cmdpos, pbyte_t pbt);
    bool add_reg_dirindex_ind(asm_t *asms, char *arg, int cmdpos, pbyte_t pbt);
    bool add_reg_dirindex(asm_t *asms, char *arg, int cmdpos, pbyte_t pbt);
    bool add_reg_ind(asm_t *asms, char *arg, int cmdpos, pbyte_t pbt);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_SINGLE_INSTRUCTIONS_FUNCTIONS
    /// \brief All the SINGLE_INSTRUCTIONS_FUNCTIONS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    bool add_direct_index(asm_t *asm_struct, char *param, int cmd_position);
    bool add_direct(asm_t *asm_struct, char *param, int cmd_position);
    bool add_indirect(asm_t *asm_struct, char *param, int cmd_position);
    bool add_register(asm_t *asm_struct, char *param);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    bool exit_false_line_treatment(char **line_words);
    bool add_instruction(asm_t *asm_struct, char **line_words);
    bool line_treatment(asm_t *asm_struct, char *line);
    bool add_instructions(asm_t *asm_struct);

    bool add_comment_to_buffer(asm_t *asm_struct, char *line);
    bool add_name_to_buffer(asm_t *asm_struct, char *line);

    bool add_magic_number(asm_t *asm_struct);
    bool add_comment(asm_t *asm_struct);
    bool add_name(asm_t *asm_struct);
    bool file_parsing(asm_t *asm_struct);

    void replace_values_in_buffer(asm_t *asm_s, int rpos, int pos, int size);
    void replace_labels(asm_t *asm_struct);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_UTILS_FUNCTIONS
    /// \brief All the UTILS_FUNCTIONS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_BUFFER_UTILS
    /// \brief All the BUFFER_UTILS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    bool add_byte_to_buffer(asm_t *asm_struct, byte_t byte);
    bool add_bytes_to_buffer(asm_t *asm_struct, byte_t *bytes, int n);
    bool add_four_bytes_to_buffer(asm_t *asm_struct, int value);
    bool add_two_bytes_to_buffer(asm_t *asm_struct, short value);
    bool write_file(int fd, asm_t *asm_struct);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_FREE_UTILS
    /// \brief All the FREE_UTILS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    void free_asm_struct(asm_t *asm_struct);
    void free_labels(labels_t **labels);
    void freen_labels(labels_t **labels, int n);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_LABELS_UTILS
    /// \brief All the LABELS_UTILS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    bool add_call_to_label(asm_t *asm_struct, char *label, call_t *call);
    call_t *init_call_data(int cmdpos, int callpos, int size);
    bool is_label(char const *str);
    bool is_registered_label(asm_t *asm_struct, char *label_name);
    bool is_registered_label2(asm_t *asm_struct, char *label_name);
    bool update_label_address(asm_t *asm_struct, char *label_name);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_PARSING_METADATA_UTILS
    /// \brief All the PARSING_METADATA_UTILS from the ASM part of
    /// the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    void change_prog_size(asm_t *asm_struct);
    bool is_comment_line(char *line);
    bool is_name_line(char *line);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    bool clean_array_from_comments(char **array);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    int display_asm_help(char **asm_help_array);
    bool check_asm_args(int argc, char **argv);
    int asm_programm_main(int argc, char **argv);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup ASM_GLOBALS_ARRAYS
    /// \brief All the GLOBALS ARRAYS from the ASM part of the project.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The help message of the asm program.
    /// \def asm_help
    /// \note The message is displayed when the program is called with the -h
    /// flag.
    ////////////////////////////////////////////////////////////////////////////
    static char const * const asm_help[] = {
        "USAGE\n",
        "./asm file_name[.s]\n",
        "DESCRIPTION\n",
        "file_name file in assembly language to be converted into ",
        "file_name.cor an executable in the Virtual Machine.\n",
        NULL
    };

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The register array.
    ////////////////////////////////////////////////////////////////////////////
    static const register_array_t register_array[] = {
        {REG_NONE, NULL},
        {R01, "r1"},
        {R02, "r2"},
        {R03, "r3"},
        {R04, "r4"},
        {R05, "r5"},
        {R06, "r6"},
        {R07, "r7"},
        {R08, "r8"},
        {R09, "r9"},
        {R10, "r10"},
        {R11, "r11"},
        {R12, "r12"},
        {R13, "r13"},
        {R14, "r14"},
        {R15, "r15"},
        {R16, "r16"},
        {REG_NONE, NULL},
    };

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The instructions array.
    ////////////////////////////////////////////////////////////////////////////
    static instruction_t const instructions[] = {
        {"live", parsing_01_live},
        {"ld", parsing_02_ld},
        {"st", parsing_03_st},
        {"add", parsing_04_add},
        {"sub", parsing_05_sub},
        {"and", parsing_06_and},
        {"or", parsing_07_or},
        {"xor", parsing_08_xor},
        {"zjmp", parsing_09_zjmp},
        {"ldi", parsing_10_ldi},
        {"sti", parsing_11_sti},
        {"fork", parsing_12_fork},
        {"lld", parsing_13_lld},
        {"lldi", parsing_14_lldi},
        {"lfork", parsing_15_lfork},
        {"aff", parsing_16_aff},
        {NULL},
    };

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

#endif /* !ASM_PROGRAMM_HEADER_H_ */
