/*
** EPITECH PROJECT, 2023
** PAGYOZ' Clib. Check it out at : https://github.com/PAGY0Z/my_lib_c
** File description:
** my_printf_header
*/

////////////////////////////////////////////////////////////////////////////////
/// \file my_printf_header.h
/// \brief Header file for my_printf.
/// \authors PAGY0Z
/// \version 0.1
/// \date 2023-23-04
////////////////////////////////////////////////////////////////////////////////

#ifndef MY_PRINTF_HEADER_H_
    #define MY_PRINTF_HEADER_H_

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup LIBRARY
    /// \brief Contains all the files of the library.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup LIBRARY_MY_PRINTF
    /// \brief All the functions, types and macros needed for the printf
    /// function.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf CHAR flags.
    /// \def PRINTF_CHARFLAGS
    /// \note The flags are "#0+- "
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_CHARFLAGS "#0+- "

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf LENGHTMODIFIER flags.
    /// \def PRINTF_LENGHTMODIFIER
    /// \note The flags are "hlLjzt"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_LENGHTMODIFIER "hlLjzt"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf SINGLE_LENGHTMODIFIER flags.
    /// \def PRINTF_SINGLE_LENGHTMODIFIER
    /// \note The flags are "Ljzt"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_SINGLE_LENGHTMODIFIER "Ljzt"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf PRINTF_DOUBLE_LENGHTMODIFIER flags.
    /// \def PRINTF_DOUBLE_LENGHTMODIFIER
    /// \note The flags are "hl"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_DOUBLE_LENGHTMODIFIER "hl"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf CONVERSIONS flags.
    /// \def PRINTF_CONVERSIONS
    /// \note The flags are "diouxXeEfFgGaAcspnmbBS%"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_CONVERSIONS "diouxXeEfFgGaAcspnmbBS%"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf CAST_INT flags.
    /// \def PRINTF_CAST_INT
    /// \note The flags are "difFeE"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_CAST_INT "difFeE"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf CAST_UNSIGNED flags.
    /// \def PRINTF_CAST_UNSIGNED
    /// \note The flags are "ouxXbBp"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_CAST_UNSIGNED "ouxXbBp"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf INT_FLAGS flags.
    /// \def PRINTF_INT_FLAGS
    /// \note The flags are "difFeE"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_INT_FLAGS "difFeE"

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The printf UINT_FLAGS flags.
    /// \def PRINTF_UINT_FLAGS
    /// \note The flags are "ouxXbBp"
    ////////////////////////////////////////////////////////////////////////////
    #define PRINTF_UINT_FLAGS "ouxXbBp"

    #include <stdarg.h>
    #include <stdlib.h>
    #include <aio.h>
    #include <unistd.h>

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The luggage struct. It contains all the variables needed for the
    /// printf function.
    /// \struct luggage_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct luggage_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The index of the last position in the format string.
        ////////////////////////////////////////////////////////////////////////
        int save_pos;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The index of the current position in the format string.
        ////////////////////////////////////////////////////////////////////////
        int pos;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The format string.
        ////////////////////////////////////////////////////////////////////////
        char const *str;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The number of characters printed.
        ////////////////////////////////////////////////////////////////////////
        int printed_char_count;
    } luggage_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The flags struct. It contains all the flags needed for the
    /// printf function.
    /// \struct flags_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct flags_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag sharp is present or not.
        ////////////////////////////////////////////////////////////////////////
        int sharp;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag zero is present or not.
        ////////////////////////////////////////////////////////////////////////
        int zero;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag minus is present or not.
        ////////////////////////////////////////////////////////////////////////
        int minus;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag plus is present or not.
        ////////////////////////////////////////////////////////////////////////
        int plus;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag space is present or not.
        ////////////////////////////////////////////////////////////////////////
        int space;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag width is present or not.
        ////////////////////////////////////////////////////////////////////////
        int width;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag precision check is present or not.
        ////////////////////////////////////////////////////////////////////////
        int precision_check;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag precision is present or not.
        ////////////////////////////////////////////////////////////////////////
        int precision;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag lenght modifier is present or not.
        ////////////////////////////////////////////////////////////////////////
        char *lenght_modifier;
        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the flag conversion is present or not.
        ////////////////////////////////////////////////////////////////////////
        char conversion;
    } flags_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The conversion_flag struct. It contains all the conversion flags
    /// needed for the printf function & their associated function.
    /// \struct conversion_flag_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct conversion_flag_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The conversion flag.
        ////////////////////////////////////////////////////////////////////////
        char conversion_flag;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The associated function.
        /// \param log The luggage struct.
        /// \param flags The flags struct.
        /// \param ap The va_list.
        /// \return The number of characters printed.
        ////////////////////////////////////////////////////////////////////////
        int (*fonction)(luggage_t *log, flags_t *flags, va_list *ap);
    } conversion_flag_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \typedef
    /// \brief The base struct. It contains all the bases needed for the printf
    /// function.
    /// \struct base_s
    ////////////////////////////////////////////////////////////////////////////
    typedef struct base_s {
        ////////////////////////////////////////////////////////////////////////
        /// \brief The base char identifier.
        ////////////////////////////////////////////////////////////////////////
        char c;
        ////////////////////////////////////////////////////////////////////////
        /// \brief The base.
        ////////////////////////////////////////////////////////////////////////
        char *base;
    } base_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \addtogroup LIBRARY_MY_PRINTF_FUNCTIONS
    /// \brief All the functions needed for the printf function.
    /// @{
    ////////////////////////////////////////////////////////////////////////////

    void my_lenght_modifier(luggage_t *log, flags_t *flags);
    void my_charflags_finder(luggage_t *log, flags_t *flags);
    int print_octal(long long oct);
    int my_bigs(luggage_t *log, flags_t *flags, va_list *ap);
    int my_getnbr_my_printf(char const * str, int start, luggage_t *log);
    int my_little_pony(long long ptr, char conversion);
    int my_hexaptr_va(luggage_t *log, flags_t *flags, va_list *ap);
    int my_littlen(luggage_t *log, flags_t *flags, va_list *ap);
    int my_putchar_va(luggage_t *log, flags_t *flags, va_list *ap);
    float rounded_float(double nbr, int precision);
    double my_negfloat(double nb);
    int my_putfloat(double nbr, int precision, char conversion);
    int my_putfloat_va(luggage_t *log, flags_t *flags, va_list *ap);
    int nbr_flags(long long nb, luggage_t *log, flags_t *flags);
    long long nb_conversion(long long nb, char c);
    int my_putnbr_my_printf(long long nb,  char const *bs, char cnv);
    int my_putnbr_va(luggage_t *l, flags_t *f, va_list *ap);
    int my_strlen_my_printf(char const *str, int count);
    int my_putstr_va(luggage_t *log, flags_t *flags, va_list *ap);
    int my_scnotation(double nb, int precision, int exp, char e);
    int int_to_scfloat(double nb, int precision, char e);
    int my_scnotation_va(luggage_t *log, flags_t *flags, va_list *ap);
    int my_treatment(luggage_t *log, flags_t *flags, va_list *ap);
    void my_parsing(luggage_t *log, va_list *ap);
    int my_printf(char const *format, ...);
    int is_tokenp(char c, char const *str);
    int my_putstrp(char const *str);
    int my_putcharp(char c);

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The flags list. It contains all the flags needed for the printf
    /// function. The flags are sorted by their conversion flag. The flags
    /// are associated with their function.
    /// \def flags_list
    /// \note The flags without a function are not implemented yet.
    ////////////////////////////////////////////////////////////////////////////
    static conversion_flag_t const flags_list[] = {
        {'a', NULL},
        {'A', NULL},
        {'b', my_putnbr_va},
        {'B', my_putnbr_va},
        {'c', my_putchar_va},
        {'d', my_putnbr_va},
        {'e', my_scnotation_va},
        {'E', my_scnotation_va},
        {'f', my_putfloat_va},
        {'F', my_putfloat_va},
        {'g', NULL},
        {'G', NULL},
        {'i', my_putnbr_va},
        {'m', NULL},
        {'n', my_littlen},
        {'o', my_putnbr_va},
        {'p', my_hexaptr_va},
        {'s', my_putstr_va},
        {'S', my_bigs},
        {'u', my_putnbr_va},
        {'x', my_putnbr_va},
        {'X', my_putnbr_va},
        {'\0', NULL}
    };

    ////////////////////////////////////////////////////////////////////////////
    /// \brief The base list. It contains all the bases needed for the printf
    /// function. The bases are sorted by their conversion flag.
    /// \def base
    ////////////////////////////////////////////////////////////////////////////
    static base_t const base[] = {
        {'d', "0123456789"},
        {'i', "0123456789"},
        {'o', "01234567"},
        {'u', "0123456789"},
        {'x', "0123456789abcdef"},
        {'X', "0123456789ABCDEF"},
        {'b', "01"},
        {'B', "01"},
        {'\0', ""}
    };

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////

#endif /* !MY_PRINTF_HEADER_H_ */
